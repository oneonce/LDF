/**********************************************************************************************************************
**                            Copyright(C), oneonce. 2020-2025. All rights reserved.
***********************************************************************************************************************
*文件名称: device_driver_block.h
*功能描述: 块设备驱动接口，该部分由device_driver_flash调用
*                注: 该部分驱动只对FLASH外设进行驱动(如命令/ECC等)。读/写/擦除等操作的地址对齐由device_driver_flash完成
*作       者: oneonce
*日       期: 2020.04.23
*版       本: 1.0
*其       他:
***********************************************************************************************************************/
#ifndef __DEVICE_DRIVER_BLOCK_H__
#define __DEVICE_DRIVER_BLOCK_H__

#include <core/device.h>

#ifdef __cplusplus
extern "C" {
#endif



	typedef struct
	{
		device_t device;

		/**********************************************************************************************************************
		**函数名称: open
		**功能描述: 打开
		**输入参数: 无
		**输出参数: 无
		**函数返回: 无
		**********************************************************************************************************************/
		void (*open)();

		/**********************************************************************************************************************
		**函数名称: close
		**功能描述: 关闭
		**                注:
		**                1. 关闭设备时，驱动层必须调用release_device_driver释放当前设备
		**输入参数:
		**                device: 待关闭的设备
		**输出参数: 无
		**函数返回: 无
		**********************************************************************************************************************/
		void (*close)(device_t* device);

		/**********************************************************************************************************************
		**函数名称: read_manufacturer_id
		**功能描述: 读厂商ID
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                >=0:具体ID
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*read_manufacturer_id)();

		/**********************************************************************************************************************
		**函数名称: read_device_id
		**功能描述: 读设备ID
		**输入参数: 无
		**输出参数: 无
		**函数返回: 
		**                >=0:具体ID
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*read_device_id)();

		/**********************************************************************************************************************
		**函数名称: get_block_size
		**功能描述: 获取块大小(字节数)
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                >=0: 块大小
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*get_block_size)();

		/**********************************************************************************************************************
		**函数名称: get_block_num
		**功能描述: 获取块总数
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                >=0: 块总数
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*get_block_num)();

		/**********************************************************************************************************************
		**函数名称: get_sector_num_of_block
		**功能描述: 获取每个块的扇区数
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                >=0: 扇区数
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*get_sector_num_of_block)();

		/**********************************************************************************************************************
		**函数名称: get_sector_size
		**功能描述: 获取扇区大小(字节数)
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                >=0: 扇区大小
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*get_sector_size)();

		/**********************************************************************************************************************
		**函数名称: get_page_num_of_sector
		**功能描述: 获取每个扇区有多少页
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                >=0: 页数
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*get_page_num_of_sector)();

		/**********************************************************************************************************************
		**函数名称: get_page_size
		**功能描述: 获取页大小(字节数)
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                >=0: 页大小
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*get_page_size)();

		/**********************************************************************************************************************
		**函数名称: is_bad_block
		**功能描述: 检查当前块是否为坏块
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                TRUE: 坏块
		**                FALSE: 非坏块
		**********************************************************************************************************************/
		bool_t (*is_bad_block)(uint32_t address);

		/**********************************************************************************************************************
		**函数名称: read_page
		**功能描述: 读页数据
		**输入参数:
		**                address: 页地址
		**                size: 读数据大小
		**                millisecond: 超时时间(毫秒)
		**输出参数: 
		**                buffer: 存放读取到数据的缓冲区
		**函数返回:
		**                >=0: 成功
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*read_page) (uint32_t address, uint8_t* buffer, int32_t size, const uint32_t millsecond);

		/**********************************************************************************************************************
		**函数名称: write_page
		**功能描述: 写页数据
		**输入参数:
		**                address: 页地址
		**                buf: 数据缓冲区
		**                size: 写数据大小
		**                millisecond: 超时时间(毫秒)
		**输出参数: 无
		**函数返回:
		**                >=0:成功
		**                <0: 失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*write_page)(uint32_t address, const uint8_t* buf, int32_t size, const uint32_t millsecond);

		/**********************************************************************************************************************
		**函数名称: erase_block
		**功能描述: 块擦除
		**输入参数:
		**                address: 块地址
		**                millisecond: 超时时间(毫秒)
		**输出参数: 无
		**函数返回:
		**                >=0: 擦除成功
		**                <0: 擦除失败，参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*erase_block)(uint32_t address, const uint32_t millsecond);
	} device_driver_block_t;

#ifdef __cplusplus
}
#endif

#endif // !__DEVICE_DRIVER_BLOCK_H__
