/**********************************************************************************************************************
**                            Copyright(C), oneonce. 2020-2025. All rights reserved.
***********************************************************************************************************************
*文件名称: device_driver_fb.h
*功能描述: LCD驱动接口
*作       者: oneonce
*日       期: 2020.04.28
*版       本: 1.0
*其       他:
***********************************************************************************************************************/
#ifndef __DEVICE_DRIVER_FB_H__
#define __DEVICE_DRIVER_FB_H__

#include <core/device.h>

#ifdef __cplusplus
extern "C" {
#endif

#define FB_SYNC_HOR_HIGH_ACT							0x0001 // 水平同步高电平有效
#define FB_SYNC_VERT_HIGH_ACT							0x0002 // 垂直同步高电平有效



	typedef struct {
		int32_t width; // 宽
		int32_t height; // 高
		uint16_t bpp; // 像素深度
		uint16_t sync; // 同步极性，参考FB_SYNC_

		/* 时序 */
		uint32_t pixel_clock; // 像素时钟

		/* 行同步信号 */
		uint32_t left_margin; // 水平左沿，同步到绘图之间的延迟
		uint32_t right_margin; // 水平右沿，绘图到同步之间的延迟

		/* 帧同步信号 */
		uint32_t upper_margin; // 垂直上沿，同步到绘图之间的延迟
		uint32_t lower_margin; // 垂直下沿，绘图到同步之间的延迟

		uint32_t hsync_len; // 水平同步的长度
		uint32_t vsync_len; // 垂直同步的长度
	} fb_config_t;



	typedef struct
	{
		device_t device;

		/**********************************************************************************************************************
		**函数名称: open
		**功能描述: 打开
		**输入参数: 无
		**输出参数: 无
		**函数返回: 无
		**********************************************************************************************************************/
		void (*open)();

		/**********************************************************************************************************************
		**函数名称: close
		**功能描述: 关闭
		**输入参数:
		**                device: 待关闭的设备
		**输出参数: 无
		**函数返回: 无
		**********************************************************************************************************************/
		void (*close)(device_t* device);

		/*********************************************************************************************************************
		**函数名称: read_pixel
		**功能描述: 获取LCD某个像素的颜色值
		**                1. 未集成LCD控制器的MCU重写该方法，若不支持，则返回false。
		**                2. 集成LCD控制器的MCU不需要重写该方法
		**输入参数:
		**                x: 待读取像素值的水平坐标
		**                y: 待读取像素值的垂直坐标
		**                bound_x1: 水平绘制坐标左边界，当x小于该坐标部分将不绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y1: 垂直绘制坐标上边界，当y小于该坐标部分将不绘制，未集成LCD控制器的MCU由底层实现
		**                bound_x2: 水平绘制坐标右边界，当x大于该坐标部分将不绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y2: 垂直绘制坐标下边界，当y大于该坐标部分将不绘制，未集成LCD控制器的MCU由底层实现
		**                color: 输出参数，返回该像素点的颜色值
		**输出参数: 无
		**函数返回: 
		**                true: 支持读取像素
		**                false: 不支持读取像素
		***********************************************************************************************************************/
		bool (*read_pixel)(int32_t x, int32_t y, int32_t bound_x1, int32_t bound_y1, int32_t bound_x2, int32_t bound_y2, color_t* color);

		/*********************************************************************************************************************
		**函数名称: draw_pixel
		**功能描述: 在指定位置(x, y)绘制一个点
		**                1. 未集成LCD控制器的MCU必须立即绘制。
		**                2. 集成LCD控制器的MCU实现空方法即可。
		**输入参数:
		**                x: 绘制点的水平坐标
		**                y: 绘制点的垂直坐标
		**                bound_x1: 水平绘制坐标左边界，当x小于该坐标部分将不绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y1: 垂直绘制坐标上边界，当y小于该坐标部分将不绘制，未集成LCD控制器的MCU由底层实现
		**                bound_x2: 水平绘制坐标右边界，当x大于该坐标部分将不绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y2: 垂直绘制坐标下边界，当y大于该坐标部分将不绘制，未集成LCD控制器的MCU由底层实现
		**                color: 绘制点的颜色
		**输出参数: 无
		**函数返回: 无
		***********************************************************************************************************************/
		void (*draw_pixel)(int32_t x, int32_t y, int32_t bound_x1, int32_t bound_y1, int32_t bound_x2, int32_t bound_y2, color_t color);

		/*********************************************************************************************************************
		**函数名称: draw_line
		**功能描述: 从指定位置(x1, y1)到(x2, y2)绘制一条直线
		**                1. 未集成LCD控制器的MCU必须立即绘制。
		**                2. 集成LCD控制器的MCU实现空方法即可。
		**输入参数:
		**                x1: 绘制直线的水平起始坐标
		**                y1: 绘制直线的垂直起始坐标
		**                x2: 绘制直线的水平结束坐标
		**                y2: 绘制直线的垂直结束坐标
		**                bound_x1: 水平绘制坐标左边界，当x1或x2小于该坐标部分将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y1: 垂直绘制坐标上边界，当y1或y2小于该坐标部分将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_x2: 水平绘制坐标右边界，当x1或x2大于该坐标部分将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y2: 垂直绘制坐标下边界，当y1或y2大于该坐标部分将不会绘制，未集成LCD控制器的MCU由底层实现
		**                color: 绘制点的颜色
		**输出参数: 无
		**函数返回: 无
		***********************************************************************************************************************/
		void (*draw_line)(int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t bound_x1, int32_t bound_y1, int32_t bound_x2, int32_t bound_y2, color_t color);

		/*********************************************************************************************************************
		**函数名称: draw_buffer
		**功能描述: 从指定左上角位置(x,y)开始绘制一段内存数据
		**                该内存数据按照从左到右，从上到下进行绘制，该内存数据可以为图片/字体或一个矩形区域数据
		**                1. 未集成LCD控制器的MCU必须立即绘制。
		**                2. 集成LCD控制器的MCU实现空方法即可。
		**输入参数:
		**                x: 绘制点的左上角水平坐标
		**                y: 绘制点的左上角垂直坐标
		**                bufferWidth: 内存数据的宽度
		**                bufferHeight: 内存数据的高度
		**                bound_x1: 水平绘制坐标左边界，当x小于该坐标时将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y1: 垂直绘制坐标上边界，当y小于该坐标时将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_x2: 水平绘制坐标右边界，当(x + bufferWidth - 1)大于该坐标的部分将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y2: 垂直绘制坐标下边界，当(y + bufferHeight - 1)大于该坐标的部分将不会绘制，未集成LCD控制器的MCU由底层实现
		**                buffer: 内存数据(颜色数据)，数据为大端模式
		**输出参数: 无
		**函数返回: 无
		***********************************************************************************************************************/
		void (*draw_buffer)(int32_t x, int32_t y, uint32_t bufferWidth, uint32_t bufferHeight, int32_t bound_x1, int32_t bound_y1, int32_t bound_x2, int32_t bound_y2, const uint8_t* buffer);

		/*********************************************************************************************************************
		**函数名称: clear
		**功能描述: 从指定左上角位置(x,y)开始，使用指定颜色对一块矩形区域清除
		**                1. 未集成LCD控制器的MCU必须立即绘制。
		**                2. 集成LCD控制器的MCU实现空方法即可。
		**输入参数:
		**                x: 绘制点的左上角水平坐标
		**                y: 绘制点的左上角垂直坐标
		**                width: 矩形区域的宽度
		**                height: 矩形区域的高度
		**                bound_x1: 水平绘制坐标左边界，当x小于该坐标时将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y1: 垂直绘制坐标上边界，当y小于该坐标时将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_x2: 水平绘制坐标右边界，当(x + width - 1)大于该坐标的部分将不会绘制，未集成LCD控制器的MCU由底层实现
		**                bound_y2: 垂直绘制坐标下边界，当(y + height - 1)大于该坐标的部分将不会绘制，未集成LCD控制器的MCU由底层实现
		**                color: 绘制点的颜色
		**输出参数: 无
		**函数返回: 无
		***********************************************************************************************************************/
		void (*clear)(int32_t x, int32_t y, uint32_t width, uint32_t height, int32_t bound_x1, int32_t bound_y1, int32_t bound_x2, int32_t bound_y2, color_t color);

		/*********************************************************************************************************************
		**函数名称: get_bpp
		**功能描述: 获取LCD像素深度，如16BPP(RGB565), 18BPP(RGB888)
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                像素深度，如16, 18, 24等
		***********************************************************************************************************************/
		uint8_t (*get_bpp)();

		/*********************************************************************************************************************
		**函数名称: get_width
		**功能描述: 获取LCD宽度(像素)
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                LCD宽度，如: 320, 800, 1920
		***********************************************************************************************************************/
		int32_t (*get_width)();

		/*********************************************************************************************************************
		**函数名称: get_height
		**功能描述: 获取LCD高度(像素)
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                LCD高度，如: 240, 480, 1080
		***********************************************************************************************************************/
		int32_t (*get_height)();

		/*********************************************************************************************************************
		**函数名称: get_fb
		**功能描述: 获取显存
		**                1. 未集成LCD控制器的MCU返回nullptr
		**                2. 成LCD控制器的MCU返回某一块内存首地址，内存大小 = LCD宽度 * LCD高度 * (像素深度 / 8)
		**输入参数: 无
		**输出参数: 无
		**函数返回:
		**                可用显存首地址
		***********************************************************************************************************************/
		uint8_t* (*get_fb)();

		/*********************************************************************************************************************
		**函数名称: submit_fb
		**功能描述: 提交当前显存数据
		**                1. 未集成LCD控制器的MCU可以执行一些收尾工作或实现空方法
		**                2. 集成LCD控制器的MCU，此时必须完成窗口/层(双缓存切换)，并准备好另一块缓存供GDI使用
		**输入参数: 无
		**                buffer: GDI当前持有的显存
		**函数返回: 无
		***********************************************************************************************************************/
		void (*submit_fb)(uint8_t* buffer);
	} device_driver_fb_t;

#ifdef __cplusplus
}
#endif

#endif // !__DEVICE_DRIVER_FB_H__
