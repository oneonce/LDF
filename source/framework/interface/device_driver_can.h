/**********************************************************************************************************************
**                            Copyright(C), oneonce. 2020-2025. All rights reserved.
***********************************************************************************************************************
*文件名称: device_driver_can.h
*功能描述: CAN驱动接口
*作       者: oneonce
*日       期: 2020.04.10
*版       本: 1.0
*其       他:
***********************************************************************************************************************/
#ifndef __DEVICE_DRIVER_CAN_H__
#define __DEVICE_DRIVER_CAN_H__
#include <core/device.h>

#ifdef __cplusplus
extern "C" {
#endif




	enum CAN_ID
	{
		CAN_ID_BITS_11 = 11, // 标准11位ID
		CAN_ID_BITS_29 = 29, // 扩展ID(29bit)
	};

	enum CAN_RTR_FRAME
	{
		CAN_RTR_FRAME_DATA = 0, // 数据帧
		CAN_RTR_FRAME_REMOTE = 1, // 远程帧
	};

	enum CAN_MODE
	{
		CAN_MODE_NORMAL = 0, // 正常模式
		CAN_MODE_LOOPBACK, // 回环模式
		//CAN_MODE_SILENT, // STM32
		//CAN_MODE_SILENT_LOOPBACK, // STM32
	};


	typedef struct
	{
		enum CAN_ID can_id; // 参考CAN_ID
		enum CAN_RTR_FRAME rtr; // 消息类型(数据帧/远程帧)，参考CAN_RTR_FRAME
		uint32_t msg_id; // 消息ID
		uint8_t* data; // 消息数据缓冲区
		uint8_t dlc; // 数据长度
	} can_message_t;



	/* CAN异步模式rx回调函数 */
	typedef void (*can_rx_callback)(uint16_t device_id, can_message_t* msg);

	/* CAN异步模式tx完成回调函数 */
	typedef void (*can_tx_callback)(uint16_t device_id);


	typedef struct
	{
		device_t device;

		/**********************************************************************************************************************
		**函数名称: open
		**                注:
		**                1. 若已注册rx回调函数，则为异步读模式
		**                2. 若已注册tx回调函数，则为异步写模式
		**功能描述: 打开设备
		**输入参数:
		**                mode: 运行模式
		**                baud_rate: 波特，常见波特率:
		**                                  5kb/15kb/33.3kb/50kb/83.3kb/95kb/100kb/125kb/250kb/500kb/1Mb/5Mb/8Mb/10Mb/s
		**                                  
		**输出参数: 无
		**函数返回: 无
		**********************************************************************************************************************/
		void (*open)(enum CAN_MODE mode, uint32_t baud_rate);

		/**********************************************************************************************************************
		**函数名称: close
		**功能描述: 关闭设备
		**                注:
		**                1. 关闭设备时，驱动层必须调用release_device_driver释放当前设备
		**输入参数:
		**                device: 待关闭的设备
		**输出参数: 无
		**函数返回: 无
		**********************************************************************************************************************/
		void (*close)(device_t* device);

		/**********************************************************************************************************************
		**函数名称: add_filter
		**功能描述: 添加过滤ID
		**                注:
		**                1. 当mask=NULL时，filter_id即使有多个，都将作为单个id进行处理
		**                2. 当mask!=NULL时, filter_id将作为一个段进行处理
		**输入参数: 
		**                can_id: can ID
		**                filter_index: 过滤器索引
		**                mask: 掩码
		**                filter_id: 过滤ID
		**                filter_id_count: 过滤id个数
		**输出参数: 无
		**函数返回: 过滤器索引
		**********************************************************************************************************************/
		uint16_t (*add_filter)(enum CAN_ID can_id, uint16_t filter_index, uint32_t* mask, uint8_t* filter_id, uint8_t filter_id_count);

		/**********************************************************************************************************************
		**函数名称: del_filter
		**功能描述: 删除ID过滤
		**输入参数:
		**                can_id: can ID
		**                filter_id: 非NULL时删除指定ID过滤器，NULL时删除所有ID过滤器
		**输出参数: 无
		**函数返回: 
		**                filter_id为非NULL: 过滤器索引
		**                filter_id为NULL: 返回0xFFFF
		**********************************************************************************************************************/
		uint16_t (*del_filter)(enum CAN_ID can_id, uint8_t* filter_id);

		/**********************************************************************************************************************
		**函数名称: sync_read
		**功能描述: 同步读消息
		**                注:
		**                1. 若已注册rx回调函数，该方法被调用时，返回异步调用错误DEV_ERR_SYNC_CALL
		**输入参数:
		**                msg: 发送的消息
		**                millisecond: 超时时间(毫秒)
		**输出参数: 无
		**函数返回:
		**                >=0: 实际读取到数据字节数
		**                <0:  参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*sync_read)(can_message_t* msg, const uint32_t millisecond);

		/**********************************************************************************************************************
		**函数名称: write
		**功能描述: 写/发送消息
		**输入参数:
		**                msg: 发送的消息
		**                msg_cnt: 消息数量
		**                millisecond: 超时时间(毫秒)
		**输出参数: 无
		**函数返回:
		**                >=0: 实际发送数据字节数
		**                <0:  参考ERROR_CODES
		**********************************************************************************************************************/
		int32_t (*write)(can_message_t* msg, int32_t msg_cnt, const uint32_t millisecond);

		/**********************************************************************************************************************
		**函数名称: register_async_rx_callback
		**功能描述: 注册异步模式rx回调函数
		**                注:
		**                1. 必须在open之前注册
		**输入参数:
		**                callback: 回调函数
		**输出参数: 无
		**函数返回: 无
		**********************************************************************************************************************/
		void (*register_rx_callback)(can_rx_callback callback);

		/**********************************************************************************************************************
		**函数名称: register_tx_callback
		**功能描述: 注册异步模式tx发送完成中断回调函数
		**                注:
		**                1. 必须在open之前注册
		**输入参数:
		**                callback: 回调函数
		**输出参数: 无
		**函数返回: 无
		**********************************************************************************************************************/
		void (*register_tx_callback)(can_tx_callback callback);
	} device_driver_can_t;

#ifdef __cplusplus
}
#endif

#endif // !__DEVICE_DRIVER_CAN_H__
